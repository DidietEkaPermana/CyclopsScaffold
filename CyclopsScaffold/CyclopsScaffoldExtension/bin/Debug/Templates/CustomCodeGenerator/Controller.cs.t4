<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter name="ModelType" type="EnvDTE.CodeType" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="dbContext" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="MetadataModel" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Threading.Tasks;
using System.Web.Mvc;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{

<# 
	var entitySetName = MetadataModel.EntitySetName;
	var dataParameter = ModelType.Name + "Data";
	var primaryKeyName = MetadataModel.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = MetadataModel.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = MetadataModel.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = MetadataModel.PrimaryKeys[0].TypeName;
#>
    public class <#= ModelType.Name #>Controller : Controller
    {
		private <#= dbContext #> db = new <#= dbContext #>();
		
		// GET: News
        public ActionResult Index()
        {
            return View();
        }

		#region API request
		[ValidateAntiForgeryToken]
		public async Task<JsonResult> Create<#= ModelType.Name #>(<#= ModelType.Name #> <#= dataParameter #>)
        {
			JsonData data = new JsonData();

            try
            {
                db.<#= entitySetName #>.Add(<#= dataParameter #>);

                await db.SaveChangesAsync();

                data.data = <#= dataParameter #>;

				data.total = 1;
            }
            catch (Exception ex)
            {
                data.errors = ex.Message;
            }

			return Json(data);
        }

		[ValidateAntiForgeryToken]
		public async Task<JsonResult> Read<#= ModelType.Name #>(int iPage, int iLength, string strSearch)
		{
			JsonData data = new JsonData();

            try
            {
				int iPageStart = (int)((iPage - 1) * iLength);

				var <#= EntitySetVariable #> = db.<#= entitySetName #>.Skip(iPageStart).Take((int)iLength);

				data.data = await <#= EntitySetVariable #>.ToListAsync();

				//data.total = ((List<<#= ModelType.Name #>>)data.data).Count();
				data.total = db.<#= entitySetName #>.Count();
            }
            catch (Exception ex)
            {
                data.errors = ex.Message;
            }

            return Json(data);
		}

		[ValidateAntiForgeryToken]
		public async Task<JsonResult> Update<#= ModelType.Name #>(<#= ModelType.Name #> <#= dataParameter #>)
        {
            JsonData data = new JsonData();

            try
            {
                db.Entry(<#= dataParameter #>).State = EntityState.Modified;
                await db.SaveChangesAsync();

                data.data = <#= dataParameter #>;

				data.total = 1;
            }
            catch (Exception ex)
            {
                data.errors = ex.Message;
            }

            return Json(data);
        }

		[ValidateAntiForgeryToken]
        public async Task<JsonResult> Delete<#= ModelType.Name #>(<#= primaryKeyShortTypeName #> id)
        {
            JsonData data = new JsonData();

            try
            {
                <#= ModelType.Name #> <#= dataParameter #> = await db.<#= entitySetName #>.FindAsync(id);
                db.<#= entitySetName #>.Remove(<#= dataParameter #>);
                await db.SaveChangesAsync();

                data.data = <#= dataParameter #>;

				data.total = 1;
            }
            catch (Exception ex)
            {
                data.errors = ex.Message;
            }

            return Json(data);
        }
		#endregion API request

		protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}